import { drink, Item, itemAmount, myAdventures, userConfirm } from "kolmafia";
import { $item } from "libram";
import { Constants } from "../Constants";
import { tryEatCbbFood } from "../shinies/Cookbookbat";
import { distillSweat, stillsuitAdventures } from "../shinies/Stillsuit";
import { liverRemaining, stomachRemaining } from "./Organs";

export function generateAdventures() {
  // Try to generate adventures once a certain threshold of adventuers remaining has been reached
  if (myAdventures() > Constants.TurngenThreshold) {
    return;
  }

  // Try to fill up the stomach first
  let eaten = false;
  if (stomachRemaining() > 0) {
    eaten = generateStomach();
  }

  // If nothing was eaten, try to drink
  if (!eaten && liverRemaining() > 0) {
    generateLiver();
  }
}

function generateStomach(): boolean {
  return tryEatCbbFood();
}

const BoozePriority: Item[] = [
  $item`Boris's Beer`,
  $item`shot of wasp venom`,
  $item`AutumnFest ale`,
  $item`void lager`,
];

function generateLiver() {
  let drunk = false;

  // Prioritize stillsuit if adventure count is high
  if (stillsuitAdventures() > 6) {
    distillSweat();
    drunk = true;
  }

  // Drink spare booze generated by other shinies
  BoozePriority.forEach(booze => {
    if (!drunk && itemAmount(booze) > 0 && liverRemaining() >= booze.inebriety) {
      drink(1, booze);
      drunk = true;
    }
  });

  // Utilize stillsuit
  if (stillsuitAdventures() > 0) {
    if (!userConfirm(`Drink familiar sweat for ${stillsuitAdventures()} adventures?`))
      throw new Error("User aborted on stillsuit");

    distillSweat();
  }
}
