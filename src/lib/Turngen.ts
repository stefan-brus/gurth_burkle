import { cliExecute, create, drink, eat, getProperty, haveEffect, haveSkill, Item, itemAmount, myAdventures, myLevel, myMaxmp, use, userConfirm, useSkill } from "kolmafia";
import { $effect, $item, $skill } from "libram";
import { Constants } from "../Constants";
import { tryEatCbbFood } from "../shinies/Cookbookbat";
import { distillSweat, stillsuitAdventures } from "../shinies/Stillsuit";
import { liverRemaining, stomachRemaining } from "./Organs";
import { getCurrentSongs, songCapacity } from "./Songs";
import { haveIngredients } from "./Utils";

export function generateAdventures() {
  // Try to generate adventures once a certain threshold of adventuers remaining has been reached
  if (myAdventures() > Constants.TurngenThreshold) {
    return;
  }

  // Try to fill up the stomach first
  let eaten = false;
  if (stomachRemaining() > 0) {
    eaten = generateStomach();
  }

  // If nothing was eaten, try to drink
  if (!eaten && liverRemaining() > 0) {
    generateLiver();
  }
}

const MilkUsedProperty = "_milkOfMagnesiumUsed";

function generateStomach(): boolean {
  let eaten = false;
  if (itemAmount($item`whet stone`) > 0) {
    use(1, $item`whet stone`);
  }

  if (haveIngredients($item`milk of magnesium`)) {
    create(1, $item`milk of magnesium`);
  }

  if (getProperty(MilkUsedProperty) !== "true" && itemAmount($item`milk of magnesium`) > 0) {
    use(1, $item`milk of magnesium`);
  }

  if (myLevel() >= 11 && itemAmount($item`astral hot dog`) > 0 && stomachRemaining() >= $item`astral hot dog`.fullness) {
    eat(1, $item`astral hot dog`);
    eaten = true;
  }

  if (!eaten) {
    eaten = tryEatCbbFood();
  }

  return eaten;
}

const BoozePriority: Item[] = [
  $item`Boris's Beer`,
  $item`shot of wasp venom`,
  $item`AutumnFest ale`,
  $item`void lager`,
];

function generateLiver() {
  let drunk = false;

  // Prioritize stillsuit if adventure count is high
  if (stillsuitAdventures() > 6) {
    distillSweat();
    drunk = true;
  }

  // Drink spare booze generated by other shinies
  BoozePriority.forEach(booze => {
    // Boris's Beer needs to be crafted if we have cottage cheese
    if (booze === $item`Boris's Beer`) {
      if (haveIngredients($item`Boris's Beer`)) {
        create(1, $item`Boris's Beer`);
      }
    }

    if (!drunk && itemAmount(booze) > 0 && liverRemaining() >= booze.inebriety) {
      if (haveEffect($effect`Ode to Booze`) < booze.inebriety && haveSkill($skill`The Ode to Booze`) && myMaxmp() > 50) {
        const currentSongs = getCurrentSongs();
        if (currentSongs.length === songCapacity()) {
          cliExecute(`uneffect ${currentSongs[0].name}`);
        }

        useSkill(1, $skill`The Ode to Booze`);
      }

      drink(1, booze);
      drunk = true;
    }
  });

  // Utilize stillsuit
  if (!drunk && stillsuitAdventures() > 0) {
    if (!userConfirm(`Drink familiar sweat for ${stillsuitAdventures()} adventures?`))
      throw new Error("User aborted on stillsuit");

    distillSweat();
  }
}
